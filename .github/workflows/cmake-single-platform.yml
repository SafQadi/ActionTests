# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: CMake on buntu

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Install googletest
      uses: ./
      with:
        googletest_tag: 'release-1.11.0'

    - name: List environment variables
      run: env
      if: runner.os != 'Windows'

    - name: configure test
      run: |
        if [ "$RUNNER_OS" == "Windows" ]; then
          cmake -T v143,host=x64 -A x64 . -B build
        else
          cmake -DCMAKE_BUILD_TYPE=Release . -B build
        fi
      working-directory:
      shell: bash
    - name: build test
      run: |
        if [ "$RUNNER_OS" == "Windows" ]; then
          cmake --build . --config Release
        else
          cmake --build .
        fi
      working-directory: build
      shell: bash
    - name: run test
      run: |
        if [ "$RUNNER_OS" == "Windows" ]; then
          ./tests.exe
        else
          ./tests
        fi
      working-directory: build
      shell: bash

